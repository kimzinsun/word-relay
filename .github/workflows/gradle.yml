name: CI/CD Pipeline
on:
  push:
    branches: [ "main", "ci-cd" ]
  pull_request:
    branches: [ "main", "ci-cd" ]

env:
  BACKEND_IMAGE: wordrelayadmin/word-relay
  FRONTEND_IMAGE: wordrelayadmin/word-relay-front

jobs:
  backend-build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: Generate image tags
        id: meta
        run: |
          TAGS="${{ env.BACKEND_IMAGE }}:latest,${{ env.BACKEND_IMAGE }}:$(echo ${{ github.sha }} | cut -c1-7)"
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
      
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: server
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          provenance: false
          sbom: false
      
      - name: Deploy backend to production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            sudo docker pull ${{ env.BACKEND_IMAGE }}:latest
            sudo docker stop wordrelay-server || true
            sudo docker rm wordrelay-server || true
            sudo docker run -d -p 8080:8080 --name wordrelay-server \
              --restart unless-stopped \
              ${{ env.BACKEND_IMAGE }}:latest

  front-build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check project structure
        run: |
          echo "Current directory structure:"
          ls -la
          echo "Front-end directory structure:"
          ls -la front || echo "front directory not found"
          ls -la client || echo "client directory not found"

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: Generate image tags
        id: meta
        run: |
          TAGS="${{ env.FRONTEND_IMAGE }}:latest,${{ env.FRONTEND_IMAGE }}:$(echo ${{ github.sha }} | cut -c1-7)"
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: front  # 실제 디렉토리 구조에 맞게 수정 필요
          platforms: linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          provenance: false
          sbom: false
          build-args: |
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
      
      - name: Deploy frontend to production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_KEY }}
          port: ${{ secrets.PRODUCTION_PORT }}
          script: |
            sudo docker pull ${{ env.FRONTEND_IMAGE }}:latest
            sudo docker stop wordrelay-front || true
            sudo docker rm wordrelay-front || true
            sudo docker run -d -p 3000:3000 --name wordrelay-front \
              --restart unless-stopped \
              ${{ env.FRONTEND_IMAGE }}:latest